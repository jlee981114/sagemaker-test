AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:StartNotebookInstance
                  - sagemaker:StopNotebookInstance
                  - sagemaker:DescribeNotebookInstance
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt MyLambdaFunctionRole.Arn
      Code:
        S3Bucket: "my-lambda-code-bucket"
        S3Key: "lambda_function.zip"
      Runtime: "python3.8"
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region

  MyEventBridgeRule1:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Trigger Lambda function for Notebook 1 based on specific condition"
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventName: 
            - "PutObject"
          requestParameters: 
            bucketName: 
              - "justin-automation-output"
            key: 
              - "notebooks/notebook.ipynb"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: "MyLambdaFunctionTarget1"
          Input: '{"notebook_name": "notebook", "aws_region": "us-east-1"}'

  # MyEventBridgeRule2:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "Trigger Lambda function for Notebook 2 based on specific condition"
  #     EventPattern: 
  #       source: 
  #         - "aws.s3"
  #       detail-type: 
  #         - "AWS API Call via CloudTrail"
  #       detail: 
  #         eventName: 
  #           - "PutObject"
  #         requestParameters: 
  #           bucketName: 
  #             - "your-bucket-name"
  #     State: "ENABLED"
  #     Targets: 
  #       - Arn: !GetAtt MyLambdaFunction.Arn
  #         Id: "MyLambdaFunctionTarget2"
  #         Input: '{"notebook_name": "notebook2", "aws_region": "us-east-1"}'

  # MyEventBridgeRule3:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "Trigger Lambda function for Notebook 3 based on specific condition"
  #     EventPattern: 
  #       source: 
  #         - "aws.s3"
  #       detail-type: 
  #         - "AWS API Call via CloudTrail"
  #       detail: 
  #         eventName: 
  #           - "PutObject"
  #         requestParameters: 
  #           bucketName: 
  #             - "your-bucket-name"
  #     State: "ENABLED"
  #     Targets: 
  #       - Arn: !GetAtt MyLambdaFunction.Arn
  #         Id: "MyLambdaFunctionTarget3"
  #         Input: '{"notebook_name": "notebook3", "aws_region": "us-east-1"}'

  # MyEventBridgeRule4:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "Trigger Lambda function for Notebook 4 based on specific condition"
  #     EventPattern: 
  #       source: 
  #         - "aws.s3"
  #       detail-type: 
  #         - "AWS API Call via CloudTrail"
  #       detail: 
  #         eventName: 
  #           - "PutObject"
  #         requestParameters: 
  #           bucketName: 
  #             - "your-bucket-name"
  #     State: "ENABLED"
  #     Targets: 
  #       - Arn: !GetAtt MyLambdaFunction.Arn
  #         Id: "MyLambdaFunctionTarget4"
  #         Input: '{"notebook_name": "notebook4", "aws_region": "us-east-1"}'

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        - !GetAtt MyEventBridgeRule1.Arn
        # - !GetAtt MyEventBridgeRule2.Arn
        # - !GetAtt MyEventBridgeRule3.Arn
        # - !GetAtt MyEventBridgeRule4.Arn
